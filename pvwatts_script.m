% Takes the Excel file generated by the PVWatts online calculator for hourly
% irradiance values and generates new estimated values for a planar solar
% concentrator.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %   INITIAL USER INPUT   %

% Enter filename of Excel output from PVWatts calculator
filename = 'pvwatts_hourly.xlsx';

% Enter system type
% 1 = Standard, 2 = Premium, 3 = Thin Film
type = 2;

% Enter microcell efficiency
pvEff = 0.30;

% Adjust for timezone
timezone = -7;

% Enter year
year = 2016;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Ensure that longitudes west of the Prime Meridian are negative
lat = xlsread(filename, 'B4:B4');
lon = xlsread(filename, 'B5:B5') * -1;

% Importing remaining data from spreadsheet
deltaT = 0.041666666 * timezone;
minute = 0;
second = 0;
etaGl = 1.526;
elev = xlsread(filename, 'B6:B6');
time = xlsread(filename, 'A19:C8778');
beamIr = xlsread(filename, 'D19:D8778');
diffIr = xlsread(filename, 'E19:E8778');
tempAmb = xlsread(filename, 'F19:F8778');
wind = xlsread(filename, 'G19:G8778');
planeIr = xlsread(filename, 'H19:H8778');
tempCell = xlsread(filename, 'I19:I8778');
outDC = xlsread(filename, 'J19:J8778');
outDCtot = xlsread(filename, 'J8779:J8779');
outAC = xlsread(filename, 'K19:K8778');
outACtot = xlsread(filename, 'K8779:K8779');
sizeWatts = xlsread(filename, 'B7:B7');
theta = xlsread(filename, 'B10:B10');
phi = xlsread(filename, 'B11:B11');
systemEff = (100 - xlsread(filename, 'B12:B12')) / 100;
invertEff = xlsread(filename, 'B13:B13') / 100;

dates = zeros(8760, 1);
sunPos = zeros(8760, 2);        %solar azimuth/zenith values from algorithm
sunPosR = zeros(8760, 3);       %solar position vectors in rectangular form
sunPosNewR = zeros(8760, 3);    %post-transform solar position vectors in rectangular form
sunPosNew = zeros(8760, 2);     %post-transform solar position vectors in spherical form
incidence = zeros(8760, 2);     %angle of incidence of the sun with respect to panel normal
incidence2 = zeros(8760, 1);
delIn = zeros(8760, 1);
sumIn = zeros(8760, 1);
transmittance = zeros(8760, 1);
planeIr2 = zeros(8760, 1);
planeBK7 = zeros(8760, 1);
planePMMA = zeros(8760, 1);
effBK7 = zeros(8760, 1);
effPMMA = zeros(8760, 1);

if type == 1
    sizePanel = 6.67 * sizeWatts;
    panelEff = 0.15;
elseif type == 2
    sizePanel = 5.25 * sizeWatts;
    panelEff = 0.19;
elseif type == 3
    sizePanel = 6.67 * sizeWatts;
    panelEff = 0.1;
end

% Arrays to interpolate from
bk7 = [0,5,10,15,20,25,30,35,40,45,50,55,60,65,67.5,70,72.5,75,77.5;
       0.997,0.995,0.996,0.996,0.996,0.996,0.993,0.985,0.977,0.96,0.946,0.921,0.893,0.865,0.675,0.353,0.174,0.07,0.013];

pmma = [0,5,10,15,20,25,30,35,40,45,50,55,60,65,67.5,70,72.5,75,77.5;
        0.867,0.866,0.868,0.867,0.868,0.866,0.864,0.853,0.836,0.816,0.796,0.776,0.724,0.718,0.582,0.299,0.145,0.066,0.023];

% Generate transform matrix from rotation matrices about X and Z
Rx = [ 1 ,       0     ,      0     ;
       0 , cosd(theta) , sind(theta);
       0 , -sind(theta), cosd(theta)];
   
Rz = [ cosd(phi) , sind(phi) ,    0 ;
      -sind(phi) , cosd(phi) ,    0 ;
             0   ,       0   ,    1  ];
       
transform = Rx * Rz;                        

for k = 1:8760
    dates(k) = datenum([year, time(k,1), time(k,2), time(k, 3), minute, second]) - deltaT;
    [sunPos(k,1), sunPos(k,2)] = SolarAzEl(dates(k), lat, lon, elev);
    [sunPosR(k,1), sunPosR(k,2), sunPosR(k,3)] = sph2rect(sunPos(k,1), sunPos(k,2));
    sunPosNewR(k,:) = (transform * (sunPosR(k,:)'))';
    [sunPosNew(k,1), sunPosNew(k,2)] = rect2sph(sunPosNewR(k,1), sunPosNewR(k,2), sunPosNewR(k,3));
    
    % Correcting elevation angle 
    if sunPos(k,2) < 0
        sunPosNew(k,2) = (-1) * sunPosNew(k,2);
    end  
        
    % Correcting azimuth angle
    if (sunPos(k,1) > 180) && (sunPosNew(k,1) < 0)
        sunPosNew(k,1) = sunPosNew(k,1) + 360;
    elseif (sunPos(k,1) <180 ) && (sunPosNew(k,1) < 0)
        sunPosNew(k,1) = sunPosNew(k,1) + 180;
    elseif (sunPos(k,1) > 180) && (sunPosNew(k,1) > 0)
        sunPosNew(k,1) = sunPosNew(k,1) + 180;
    end       
    
    incidence(k,1) = abs(90 - sunPosNew(k,2)); 
    
    if beamIr(k) == 0
        incidence(k,2) = 180;
    elseif abs((planeIr(k) - diffIr(k))./beamIr(k)) > 1
        incidence(k,2) = -90;
    else
        incidence(k,2) = acosd((planeIr(k) - diffIr(k))./beamIr(k));
    end
    
    if incidence(k,1) < 90
        incidence2(k) = asind((1/etaGl) * sind(incidence(k,1)));
        delIn(k) = incidence2(k) - incidence(k,1);
        sumIn(k) = incidence2(k) + incidence(k,1);
        transmittance(k) = 1 - 0.5*((sind(delIn(k))^2)/(sind(sumIn(k))^2) + (tand(delIn(k))^2)/(tand(sumIn(k))^2));
    else
        incidence2(k) = 180;
        transmittance(k) = 0;
    end
    
%   Re-calculating plane of array incidence using the angle of incidence
%   values generated in this script
    if incidence(k,1) > 90
       planeIr2(k) = 0;
    else
       planeIr2(k) = (beamIr(k) .* cosd(incidence(k,1))) + ((180 - theta)/180) * diffIr(k);
    end
        
end

% Generating efficiency values for BK7 and PMMA based on incidence angle
effBK7 = interp1(bk7(1,:), bk7(2,:), incidence(:,1), 'spline', 0);
effPMMA = interp1(pmma(1,:), pmma(2,:), incidence(:,1), 'spline', 0);

% Calculating PoA irradiance for BK7 and PMMA optics
planeBK7 = beamIr .* cosd(incidence(:,1)) .* effBK7;
planePMMA = beamIr .* cosd(incidence(:,1)) .* effPMMA;

% Calculating DC power for BK7 and PMMA optics
powerBK7 = (sizePanel * systemEff * pvEff) .* planeBK7; 
powerPMMA = (sizePanel * systemEff * pvEff) .* planePMMA;

% Recalculating output DC power for new angles of incidence
powerDC = (sizePanel * systemEff * panelEff) .* planeIr2 .* transmittance;
powerTot = [sum(powerDC) , sum(powerBK7) , sum(powerPMMA)];

% Calculating percent of original panel total power for BK7 and PMMA
% concentrators
ratios = [(powerTot(2)/powerTot(1)) * 100, (powerTot(3)/powerTot(1)) * 100];
directCompare = [beamIr .* cosd(incidence(:,1)), planeBK7, planePMMA];

% Writing new values to Excel workbook
xlswrite(filename, {'DC System Out (W), BK7 Optics '}, 1, 'L18:L18');
xlswrite(filename, powerBK7, 1, 'L19');
xlswrite(filename, powerTot(2), 1, 'L8779:L8779');

xlswrite(filename, {'DC System Out (W), PMMA Optics'}, 1, 'M18:M18');
xlswrite(filename, powerPMMA, 1, 'M19');
xlswrite(filename, powerTot(3), 1, 'M8779:M8779');

xlswrite(filename, {'DC System Out (W), PVWatts'}, 1, 'N18:N18');
xlswrite(filename, powerDC, 1, 'N19');
xlswrite(filename, powerTot(1), 1, 'N8779:N8779');

xlswrite(filename, {'% of original'}, 1, 'A8780:A8780');
xlswrite(filename, ratios, 1, 'L8780:M8780');


